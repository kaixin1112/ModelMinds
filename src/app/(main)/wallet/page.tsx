// @ts-nocheck
// TODO: Fix typescript errors, this file was generated by an AI.
"use client";

import { useState, useEffect, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Wallet as WalletIcon, Gift, Tag, PlusCircle, ShoppingCart, Download, History, TrendingUp, TrendingDown, AlertCircle, Star, Award, Sparkles, CreditCard, Loader2, QrCode } from "lucide-react";
import Image from 'next/image';
import { useToast } from "@/hooks/use-toast";
import { cn } from '@/lib/utils';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"

interface Transaction {
  id: string;
  type: 'credit' | 'debit_cash' | 'debit_points' | 'perk_unlocked';
  description: string;
  amount?: number; // MYR for cash transactions
  points?: number; // Points for point transactions
  date: string;
  icon: React.ReactNode;
}

interface Perk {
  id: string;
  title: string;
  description: string;
  costType: 'points' | 'cash' | 'free';
  pointsCost?: number;
  cashCost?: number; // MYR
  expiryDate: string;
  imageUrl: string;
  dataAiHint: string;
  isRedeemed?: boolean; 
}

const mockTransactions: Transaction[] = [
  { id: '1', type: 'credit', description: 'Recycled Plastic Bottles', amount: 5.50, points: 55, date: '2024-07-20', icon: <TrendingUp className="h-5 w-5 text-green-500" /> },
  { id: '2', type: 'credit', description: 'Recycled Paper Stack', amount: 2.75, points: 27, date: '2024-07-18', icon: <TrendingUp className="h-5 w-5 text-green-500" /> },
  { id: '3', type: 'perk_unlocked', description: 'Unlocked: 10% off at Green Cafe', date: '2024-07-15', icon: <Gift className="h-5 w-5 text-primary" /> },
  { id: '4', type: 'debit_cash', description: 'Redeemed: Coffee Voucher (Cash)', amount: 10.00, date: '2024-07-10', icon: <TrendingDown className="h-5 w-5 text-destructive" /> },
  { id: '5', type: 'credit', description: 'Recycled Metal Cans', amount: 7.20, points: 72, date: '2024-07-05', icon: <TrendingUp className="h-5 w-5 text-green-500" /> },
];

const initialPerks: Perk[] = [
  { id: 'p1', title: '15% Off Eco Groceries', description: 'Enjoy a discount at participating eco-friendly stores.', costType: 'points', pointsCost: 100, expiryDate: '2024-08-31', imageUrl: 'https://picsum.photos/seed/grocery/300/200', dataAiHint: 'eco friendly groceries' },
  { id: 'p2', title: 'Free Reusable Coffee Cup', description: 'Claim your free stylish reusable coffee cup.', costType: 'points', pointsCost: 75, expiryDate: '2024-09-15', imageUrl: 'https://picsum.photos/seed/coffee/300/200', dataAiHint: 'reusable cup' },
  { id: 'p3', title: 'RM5 Off Next SmartCycle Deposit', description: 'Get RM5 off your next recycling deposit transaction fee (if any).', costType: 'cash', cashCost: 2.00, expiryDate: '2024-10-01', imageUrl: 'https://picsum.photos/seed/voucher/300/200', dataAiHint: 'discount voucher' },
  { id: 'p4', title: 'Early Access: New App Features', description: 'Be the first to try upcoming SmartCycle app updates.', costType: 'free', expiryDate: 'N/A', imageUrl: 'https://picsum.photos/seed/features/300/200', dataAiHint: 'new features tech' },
];

// Mock user details for QR code
const mockUserDetails = {
  name: "Demo User",
  email: "user@example.com",
};

export default function WalletPage() {
  const { toast } = useToast();
  const [balance, setBalance] = useState(0);
  const [loyaltyPoints, setLoyaltyPoints] = useState(0);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [perks, setPerks] = useState<Perk[]>([]);
  const [isLoadingWallet, setIsLoadingWallet] = useState(true);
  const [isLoadingPerks, setIsLoadingPerks] = useState(true);
  const [walletId, setWalletId] = useState<string>("SCWLT-DEMO-12345"); // Mock Wallet ID
  const [showQrDialog, setShowQrDialog] = useState(false);

  useEffect(() => {
    // Simulate API call for wallet details
    const walletTimer = setTimeout(() => {
      updateBalancesAndTransactions(mockTransactions);
      setIsLoadingWallet(false);
    }, 1000);

    // Simulate API call for perks
    const perksTimer = setTimeout(() => {
      setPerks(initialPerks.map(p => ({...p, isRedeemed: mockTransactions.some(t => (t.type === 'debit_cash' || t.type === 'debit_points' || t.type === 'perk_unlocked') && (t.description.includes(p.title) || t.description.includes(p.id))  ) })));
      setIsLoadingPerks(false);
    }, 1500); 

    return () => {
      clearTimeout(walletTimer);
      clearTimeout(perksTimer);
    };
  }, []);

  const updateBalancesAndTransactions = (currentTransactions: Transaction[]) => {
    const currentBalance = currentTransactions
      .filter(t => t.type === 'credit')
      .reduce((acc, t) => acc + (t.amount || 0), 0) - 
      currentTransactions
      .filter(t => t.type === 'debit_cash')
      .reduce((acc, t) => acc + (t.amount || 0), 0);
    setBalance(currentBalance);

    const calculatedPoints = currentTransactions
      .filter(t => t.type === 'credit' && t.points)
      .reduce((acc, t) => acc + (t.points || 0), 0) -
      currentTransactions
      .filter(t => t.type === 'debit_points' && t.points)
      .reduce((acc, t) => acc + (t.points || 0), 0);
    setLoyaltyPoints(Math.max(0, calculatedPoints)); 
    
    setTransactions([...currentTransactions].sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime()));
  };

  const handleRedeemPerk = (perkToRedeem: Perk) => {
    if (perkToRedeem.isRedeemed) {
        toast({ title: "Already Claimed", description: "You have already claimed or redeemed this perk.", variant: "default" });
        return;
    }

    let canRedeem = false;
    let newTransaction: Transaction | null = null;
    let redemptionMessage = "";

    if (perkToRedeem.costType === 'points') {
      if (loyaltyPoints >= (perkToRedeem.pointsCost || 0)) {
        canRedeem = true;
        newTransaction = {
          id: Date.now().toString(),
          type: 'debit_points',
          description: `Redeemed: ${perkToRedeem.title}`,
          points: perkToRedeem.pointsCost,
          date: new Date().toISOString().split('T')[0],
          icon: <Star className="h-5 w-5 text-accent" />
        };
        redemptionMessage = `${perkToRedeem.title} redeemed successfully using ${perkToRedeem.pointsCost} points.`;
      } else {
        toast({ title: "Insufficient Points", description: `You need ${perkToRedeem.pointsCost} points, but have ${loyaltyPoints}.`, variant: "destructive" });
      }
    } else if (perkToRedeem.costType === 'cash') {
      if (balance >= (perkToRedeem.cashCost || 0)) {
        canRedeem = true;
        newTransaction = {
          id: Date.now().toString(),
          type: 'debit_cash',
          description: `Purchased: ${perkToRedeem.title}`,
          amount: perkToRedeem.cashCost,
          date: new Date().toISOString().split('T')[0],
          icon: <TrendingDown className="h-5 w-5 text-destructive" />
        };
        redemptionMessage = `${perkToRedeem.title} purchased for MYR ${perkToRedeem.cashCost?.toFixed(2)}.`;
      } else {
        toast({ title: "Insufficient Balance", description: `This perk costs MYR ${perkToRedeem.cashCost?.toFixed(2)}, but your balance is MYR ${balance.toFixed(2)}.`, variant: "destructive" });
      }
    } else if (perkToRedeem.costType === 'free') {
        canRedeem = true; 
         newTransaction = { 
          id: Date.now().toString(),
          type: 'perk_unlocked',
          description: `Claimed: ${perkToRedeem.title}`,
          date: new Date().toISOString().split('T')[0],
          icon: <Gift className="h-5 w-5 text-primary" />
        };
        redemptionMessage = `${perkToRedeem.title} claimed successfully.`;
    }

    if (canRedeem && newTransaction) {
      const updatedTransactions = [...transactions, newTransaction];
      updateBalancesAndTransactions(updatedTransactions);
      setPerks(perks.map(p => p.id === perkToRedeem.id ? { ...p, isRedeemed: true } : p));
      toast({ title: perkToRedeem.costType === 'free' ? "Perk Claimed!" : "Perk Redeemed!", description: redemptionMessage, variant: "default" });
    }
  };

  const qrCodeData = useMemo(() => {
    const data = {
      name: mockUserDetails.name,
      email: mockUserDetails.email,
      walletId: walletId,
    };
    return `smartcycle_wallet:${JSON.stringify(data)}`;
  }, [walletId]);

  const qrCodeImageUrl = useMemo(() => {
    return `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(qrCodeData)}`;
  }, [qrCodeData]);


  if (isLoadingWallet) { 
    return (
      <div className="container mx-auto py-8 px-4 flex justify-center items-center h-[calc(100vh-8rem)]">
        <WalletIcon className="h-12 w-12 text-primary animate-pulse" />
        <p className="ml-4 text-xl text-muted-foreground">Loading your wallet...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-8 px-4">
      <div className="mb-8">
        <h1 className="text-3xl font-bold tracking-tight text-foreground">My Wallet</h1>
        <p className="text-muted-foreground">View your earnings, loyalty points, perks, and transaction history.</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-1 space-y-6">
            <Card className="shadow-lg">
            <CardHeader>
                <CardTitle className="flex items-center text-primary">
                <WalletIcon className="mr-2 h-7 w-7" />
                Current Balance
                </CardTitle>
            </CardHeader>
            <CardContent>
                <p className="text-4xl font-bold text-foreground">MYR {balance.toFixed(2)}</p>
                <p className="text-sm text-muted-foreground mt-1">Available for redemption or withdrawal</p>
            </CardContent>
            <CardFooter className="flex space-x-2">
                <AlertDialog>
                  <AlertDialogTrigger asChild>
                    <Button className="flex-1 bg-primary text-primary-foreground hover:bg-primary/90">
                      <QrCode className="mr-2 h-4 w-4" /> Cash In (QR)
                    </Button>
                  </AlertDialogTrigger>
                  <AlertDialogContent>
                    <AlertDialogHeader>
                      <AlertDialogTitle className="flex items-center"><QrCode className="mr-2 h-5 w-5 text-primary" /> Your Wallet QR Code</AlertDialogTitle>
                      <AlertDialogDescription>
                        Present this QR code at any SmartCycle partner to cash in funds to your wallet.
                      </AlertDialogDescription>
                    </AlertDialogHeader>
                    <div className="flex flex-col items-center justify-center py-4 space-y-3">
                        <Image 
                            src={qrCodeImageUrl} 
                            alt="Wallet QR Code" 
                            width={200} 
                            height={200}
                            className="rounded-md border shadow-md"
                            data-ai-hint="qr code"
                        />
                        <div className="text-sm text-center text-muted-foreground space-y-0.5">
                            <p><span className="font-medium text-foreground">Name:</span> {mockUserDetails.name}</p>
                            <p><span className="font-medium text-foreground">Email:</span> {mockUserDetails.email}</p>
                            <p><span className="font-medium text-foreground">Wallet ID:</span> {walletId}</p>
                        </div>
                    </div>
                    <AlertDialogFooter>
                      <AlertDialogAction>Done</AlertDialogAction>
                    </AlertDialogFooter>
                  </AlertDialogContent>
                </AlertDialog>

                <Button variant="outline" className="flex-1" onClick={() => toast({title: "Demo Action", description: "Withdrawal functionality is for demonstration."})}>
                 <CreditCard className="mr-2 h-4 w-4" /> Withdraw
                </Button>
            </CardFooter>
            </Card>

            <Card className="shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center text-accent">
                  <Star className="mr-2 h-7 w-7" />
                  Loyalty Points
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-4xl font-bold text-foreground">{loyaltyPoints} pts</p>
                <p className="text-sm text-muted-foreground mt-1">Earn more by recycling!</p>
              </CardContent>
               <CardFooter>
                 <Button variant="outline" className="w-full border-accent text-accent hover:bg-accent/10" onClick={() => document.getElementById('perks-section')?.scrollIntoView({behavior: 'smooth'})}>
                    <Award className="mr-2 h-4 w-4" /> View Redeemable Perks
                </Button>
              </CardFooter>
            </Card>
        </div>


        <Card className="lg:col-span-2 shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center">
              <History className="mr-2 h-6 w-6 text-primary" />
              Transaction History
            </CardTitle>
            <CardDescription>Your recent activities and earnings.</CardDescription>
          </CardHeader>
          <CardContent className="p-0">
            <ScrollArea className="h-[300px] md:h-[calc(var(--card-height,400px)-var(--header-height,70px)-var(--footer-height,60px))] lg:h-[480px]">
              {transactions.length > 0 ? (
                <ul className="divide-y divide-border">
                  {transactions.map((transaction) => (
                    <li key={transaction.id} className="flex items-center justify-between p-4 hover:bg-muted/50 transition-colors">
                      <div className="flex items-center">
                        <span className={cn("mr-3 p-2 rounded-full",
                           transaction.type === 'credit' ? 'bg-green-100 dark:bg-green-900/30' :
                           transaction.type === 'debit_cash' ? 'bg-red-100 dark:bg-red-900/30' :
                           transaction.type === 'debit_points' ? 'bg-accent/10 dark:bg-accent/20' : // Changed from yellow
                           'bg-primary/10'
                        )}>
                          {transaction.icon}
                        </span>
                        <div>
                          <p className="font-medium text-sm text-foreground">{transaction.description}</p>
                          <p className="text-xs text-muted-foreground">{new Date(transaction.date).toLocaleDateString()}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        {transaction.amount !== undefined && (
                          <p className={`text-sm font-semibold ${transaction.type === 'credit' ? 'text-green-600 dark:text-green-400' : 'text-destructive'}`}>
                            {transaction.type === 'credit' ? '+' : '-'} MYR {transaction.amount.toFixed(2)}
                          </p>
                        )}
                        {transaction.points !== undefined && (
                           <p className={`text-xs ${transaction.type === 'credit' ? 'text-accent' : transaction.type === 'debit_points' ? 'text-destructive' : 'text-accent'}`}>
                            {(transaction.type === 'credit' ? '+' : '-') + transaction.points} pts
                          </p>
                        )}
                        {transaction.type === 'perk_unlocked' && (
                            <Tag className="h-5 w-5 text-primary" />
                        )}
                      </div>
                    </li>
                  ))}
                </ul>
              ) : (
                <div className="flex flex-col items-center justify-center h-full p-4">
                  <AlertCircle className="h-10 w-10 text-muted-foreground mb-2" />
                  <p className="text-muted-foreground">No transactions yet.</p>
                  <p className="text-xs text-muted-foreground">Start recycling to see your earnings!</p>
                </div>
              )}
            </ScrollArea>
          </CardContent>
           <CardFooter className="border-t pt-4">
            <Button variant="outline" className="w-full" onClick={() => toast({title: "Demo Action", description: "Download statement functionality is for demonstration."})}>
              <Download className="mr-2 h-4 w-4" /> Download Statement
            </Button>
          </CardFooter>
        </Card>
      </div>

      <section id="perks-section" className="mt-10">
        <h2 className="text-2xl font-semibold mb-6 text-foreground flex items-center">
            <Sparkles className="mr-2 h-7 w-7 text-accent" />
            Your Perks & Vouchers
        </h2>
        {isLoadingPerks ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {[...Array(4)].map((_, index) => (
              <Card key={`perk-loader-${index}`} className="overflow-hidden shadow-lg flex flex-col">
                 <div className="w-full h-40 bg-muted animate-pulse"></div>
                 <CardHeader>
                   <div className="h-6 w-3/4 bg-muted animate-pulse rounded"></div>
                   <div className="h-4 w-full bg-muted animate-pulse rounded mt-2"></div>
                   <div className="h-4 w-1/2 bg-muted animate-pulse rounded mt-1"></div>
                 </CardHeader>
                 <CardContent className="flex-grow">
                    <div className="h-5 w-1/3 bg-muted animate-pulse rounded"></div>
                    <div className="h-3 w-1/4 bg-muted animate-pulse rounded mt-2"></div>
                 </CardContent>
                 <CardFooter>
                    <Button className="w-full" disabled><Loader2 className="h-4 w-4 animate-spin mr-2" /> Loading...</Button>
                 </CardFooter>
              </Card>
            ))}
          </div>
        ) : perks.length > 0 ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {perks.map((perk) => (
              <Card key={perk.id} className={cn("overflow-hidden hover:shadow-xl transition-shadow duration-300 flex flex-col", perk.isRedeemed ? 'opacity-70 bg-muted/50' : 'shadow-lg')}>
                <div className="relative w-full h-40">
                  <Image 
                      src={perk.imageUrl} 
                      alt={perk.title} 
                      fill
                      sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
                      style={{objectFit: 'cover'}}
                      data-ai-hint={perk.dataAiHint} 
                  />
                </div>
                <CardHeader>
                  <CardTitle className="text-lg">{perk.title}</CardTitle>
                  <CardDescription className="text-sm h-10 line-clamp-2">{perk.description}</CardDescription>
                </CardHeader>
                <CardContent className="flex-grow">
                  {perk.costType === 'points' && perk.pointsCost && (
                    <p className="text-base font-semibold text-accent flex items-center">
                      <Star className="h-5 w-5 mr-1.5 text-accent" /> {perk.pointsCost} points 
                    </p>
                  )}
                  {perk.costType === 'cash' && perk.cashCost !== undefined &&(
                     <p className="text-base font-semibold text-primary flex items-center">
                       <CreditCard className="h-5 w-5 mr-1.5 text-green-500" /> MYR {perk.cashCost.toFixed(2)}
                     </p>
                  )}
                  {perk.costType === 'free' && (
                    <p className="text-base font-semibold text-primary">Free</p>
                  )}
                  <p className="text-xs text-muted-foreground mt-1">Expires: {perk.expiryDate === 'N/A' ? 'No Expiry' : new Date(perk.expiryDate).toLocaleDateString()}</p>
                </CardContent>
                <CardFooter>
                  <Button 
                    className={cn("w-full", perk.isRedeemed ? "bg-muted-foreground hover:bg-muted-foreground/90 text-background" : "bg-accent hover:bg-accent/90 text-accent-foreground" )}
                    onClick={() => handleRedeemPerk(perk)}
                    disabled={perk.isRedeemed}
                  >
                    {perk.isRedeemed ? "Claimed" : (perk.costType === 'free' ? "Claim Free Perk" : (perk.costType === 'cash' ? "Buy with Cash" : "Redeem with Points"))}
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        ) : (
          <Card className="py-10 shadow-lg">
            <CardContent className="text-center">
               <AlertCircle className="h-10 w-10 text-muted-foreground mx-auto mb-2" />
              <p className="text-muted-foreground">No active perks or coupons.</p>
              <p className="text-xs text-muted-foreground">Keep recycling to unlock exciting rewards!</p>
            </CardContent>
          </Card>
        )}
      </section>
    </div>
  );
}
