// @ts-nocheck
// TODO: Fix typescript errors, this file was generated by an AI.
"use client"; 

import { useState, useEffect, useRef, useCallback } from "react"; 
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { MapPinIcon, PackageCheck, CheckCircle, ListFilter, LocateFixed, Loader2 } from "lucide-react";
import { getSmartVendingMachines, type SmartVendingMachine } from "@/services/smart-vending-machine";
import InteractiveMap from "@/components/InteractiveMap"; 
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { useToast } from "@/hooks/use-toast";


// Fetching data on the client side as it's now a client component
async function fetchMachines(): Promise<SmartVendingMachine[]> {
  return getSmartVendingMachines(); // Location param is not used by mock service
}

// Helper function to calculate squared Euclidean distance (faster than Haversine for relative comparison)
const getDistanceSquared = (loc1: { lat: number; lng: number }, loc2: { lat: number; lng: number }): number => {
  const deltaLat = loc1.lat - loc2.lat;
  const deltaLng = loc1.lng - loc2.lng;
  return deltaLat * deltaLat + deltaLng * deltaLng;
};

const findNearestMachine = (userCoords: { lat: number; lng: number }, allMachines: SmartVendingMachine[]): SmartVendingMachine | null => {
  if (!allMachines || allMachines.length === 0) {
    return null;
  }

  let nearestMachine = allMachines[0];
  let minDistanceSquared = getDistanceSquared(userCoords, nearestMachine.location);

  for (let i = 1; i < allMachines.length; i++) {
    const machine = allMachines[i];
    const distanceSquared = getDistanceSquared(userCoords, machine.location);
    if (distanceSquared < minDistanceSquared) {
      minDistanceSquared = distanceSquared;
      nearestMachine = machine;
    }
  }
  return nearestMachine;
};


export default function LocatorPage() {
  const [machines, setMachines] = useState<SmartVendingMachine[]>([]);
  const [selectedMachineId, setSelectedMachineId] = useState<string | null>(null);
  const [userLocation, setUserLocation] = useState<{ lat: number; lng: number } | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isLocating, setIsLocating] = useState(false);
  const listScrollAreaRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  useEffect(() => {
    async function loadMachines() {
      setIsLoading(true); 
      try {
        const fetchedMachines = await fetchMachines();
        setMachines(fetchedMachines);
      } catch (error) {
        console.error("Failed to load machines:", error);
        toast({ title: "Error", description: "Failed to load vending machines.", variant: "destructive" });
      } finally {
        setIsLoading(false);
      }
    }
    loadMachines();
  }, [toast]);

  const scrollToMachineCard = useCallback((machineId: string) => {
    const cardElement = document.getElementById(`machine-card-${machineId}`);
    if (cardElement && listScrollAreaRef.current) {
      const scrollViewport = listScrollAreaRef.current.querySelector('div[data-radix-scroll-area-viewport]');
      if (scrollViewport) {
        const viewportRect = scrollViewport.getBoundingClientRect();
        const cardRect = cardElement.getBoundingClientRect();
        const isCardFullyVisible = cardRect.top >= viewportRect.top && cardRect.bottom <= viewportRect.bottom;
        
        if (!isCardFullyVisible) {
          const scrollTop = scrollViewport.scrollTop + cardRect.top - viewportRect.top - (viewportRect.height / 2) + (cardRect.height / 2);
           scrollViewport.scrollTo({ top: scrollTop, behavior: 'smooth' });
        }
      }
    }
  }, [listScrollAreaRef]);

  const handleMarkerClick = useCallback((machineId: string) => {
    setSelectedMachineId(machineId);
    // Do not set userLocation to null, so user's blue dot remains if it was set
    scrollToMachineCard(machineId);
  }, [setSelectedMachineId, scrollToMachineCard]);
  
  const handleCardClick = useCallback((machineId: string) => {
    setSelectedMachineId(machineId);
    // Do not set userLocation to null
  }, [setSelectedMachineId]);

  const handleLocateMe = () => {
    if (navigator.geolocation) {
      setIsLocating(true);
      // setSelectedMachineId(null); // Clear selection if user wants to focus on themselves first, then we find nearest.

      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          const currentUserLoc = { lat: latitude, lng: longitude };
          setUserLocation(currentUserLoc); // Show user's dot on map

          if (machines.length > 0) {
            const nearestMachine = findNearestMachine(currentUserLoc, machines);
            if (nearestMachine) {
              setSelectedMachineId(nearestMachine.id); // Map will focus on this
              scrollToMachineCard(nearestMachine.id); // List will scroll to this
              toast({ title: "Location Found", description: `Showing the nearest machine: ${nearestMachine.cityName} - ${nearestMachine.id.split('-')[1]}` });
            } else {
              // This case means machines exist, but findNearestMachine returned null (should not happen if machines array is not empty)
              toast({ title: "Location Found", description: "Map centered on your location. Could not identify a nearest machine." });
            }
          } else {
            toast({ title: "Location Found", description: "Map centered on your location. No machines currently available." });
          }
          setIsLocating(false);
        },
        (error) => {
          console.error("Error getting user location:", error);
          setIsLocating(false);
          let errorMessage = "Could not retrieve your location.";
          if (error.code === error.PERMISSION_DENIED) {
            errorMessage = "Location access denied. Please enable it in your browser settings.";
          } else if (error.code === error.POSITION_UNAVAILABLE) {
            errorMessage = "Location information is unavailable.";
          } else if (error.code === error.TIMEOUT) {
            errorMessage = "The request to get user location timed out.";
          }
          toast({ title: "Locate Error", description: errorMessage, variant: "destructive" });
        },
        { timeout: 10000, enableHighAccuracy: true }
      );
    } else {
      toast({ title: "Locate Error", description: "Geolocation is not supported by your browser.", variant: "destructive" });
    }
  };


  return (
    <div className="container mx-auto py-8 px-4 flex flex-col h-full">
      <div className="mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
            <h1 className="text-3xl font-bold tracking-tight text-foreground">Vending Machine Locator</h1>
            <p className="text-muted-foreground">Find smart recycling vending machines. Use the "Locate Me" button for nearby options.</p>
        </div>
        <Button onClick={handleLocateMe} disabled={isLocating} className="w-full sm:w-auto bg-accent hover:bg-accent/90 text-accent-foreground">
          {isLocating ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <LocateFixed className="mr-2 h-4 w-4" />
          )}
          Locate Me
        </Button>
      </div>


      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 flex-grow min-h-0 md:overflow-hidden">
        <div className="md:col-span-2 h-[400px] md:h-full rounded-lg shadow-lg overflow-hidden bg-muted">
          {isLoading && !process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN && (
             <div className="w-full h-full bg-muted flex flex-col items-center justify-center rounded-lg">
                <LocateFixed className="h-12 w-12 text-primary animate-pulse" />
                <p className="mt-2 text-muted-foreground">Loading machine data...</p>
             </div>
          )}
          {(!isLoading || process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN) && (
            <InteractiveMap
                machines={machines}
                selectedMachineId={selectedMachineId}
                userLocation={userLocation}
                onMarkerClick={handleMarkerClick}
                className="w-full h-full"
            />
          )}
        </div>

        <div className="md:col-span-1 flex flex-col min-h-0">
           <Card className="flex-grow flex flex-col shadow-lg overflow-hidden">
             <CardHeader className="border-b shrink-0">
                <CardTitle className="text-xl flex items-center">
                    <ListFilter className="mr-2 h-5 w-5 text-primary"/>
                    Available Machines
                </CardTitle>
                <CardDescription>{isLoading ? "Loading..." : `${machines.length} machines found.`}</CardDescription>
             </CardHeader>
             <CardContent className="p-0 flex-grow overflow-y-auto">
                <ScrollArea className="h-full p-4" ref={listScrollAreaRef}> 
                {isLoading && <div className="flex justify-center items-center h-full"><Loader2 className="h-8 w-8 animate-spin text-primary" /> <p className="ml-2 text-muted-foreground">Loading machines...</p></div>}
                {!isLoading && machines.length === 0 && <p className="text-muted-foreground p-4 text-center">No vending machines found.</p>}
                {!isLoading && machines.length > 0 && (
                    <div className="space-y-4">
                    {machines.map((machine) => (
                    <Card 
                        id={`machine-card-${machine.id}`}
                        key={machine.id} 
                        className={cn(
                            "hover:shadow-md transition-all duration-150 ease-out cursor-pointer",
                            selectedMachineId === machine.id ? "ring-2 ring-primary shadow-xl bg-primary/5" : "shadow-sm"
                        )}
                        onClick={() => handleCardClick(machine.id)}
                    >
                        <CardHeader className="pb-3">
                        <CardTitle className="text-lg">{machine.cityName} - {machine.id.split('-')[1]}</CardTitle>
                        <CardDescription className="text-xs">
                           {machine.address}
                        </CardDescription>
                        </CardHeader>
                        <CardContent>
                        <h4 className="font-medium mb-1 text-sm text-foreground flex items-center">
                            <PackageCheck className="mr-2 h-4 w-4 text-primary" />
                            Accepted Materials:
                        </h4>
                        <ul className="space-y-0.5">
                            {machine.acceptedMaterialTypes.map((material) => (
                            <li key={material} className="flex items-center text-xs text-muted-foreground">
                                <CheckCircle className="mr-1.5 h-3.5 w-3.5 text-green-500" />
                                {material}
                            </li>
                            ))}
                        </ul>
                        </CardContent>
                    </Card>
                    ))}
                    </div>
                )}
                </ScrollArea>
             </CardContent>
           </Card>
        </div>
      </div>
    </div>
  );
}

