// @ts-nocheck
// TODO: Fix typescript errors, this file was generated by an AI.
"use client";

import type { SmartVendingMachine } from "@/services/smart-vending-machine";
import { MapPin, AlertTriangle, LocateFixed, WifiOff } from "lucide-react";
import { cn } from "@/lib/utils";
import { useEffect, useRef, useState } from "react";
import mapboxgl, { LngLatLike, Marker } from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import { createRoot, type Root as ReactDOMRoot } from 'react-dom/client';

interface InteractiveMapProps {
  machines: SmartVendingMachine[];
  selectedMachineId?: string | null;
  userLocation?: { lat: number; lng: number } | null;
  onMarkerClick?: (machineId: string) => void;
  className?: string;
}

const MAPBOX_ACCESS_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;
const PLACEHOLDER_TOKEN = "YOUR_MAPBOX_ACCESS_TOKEN_HERE"; // Default placeholder

const DEFAULT_CENTER: LngLatLike = [101.6869, 3.1390]; // Kuala Lumpur
const DEFAULT_ZOOM = 10;

export default function InteractiveMap({
  machines,
  selectedMachineId,
  userLocation,
  onMarkerClick,
  className,
}: InteractiveMapProps) {
  const mapContainerRef = useRef<HTMLDivElement>(null);
  const mapRef = useRef<mapboxgl.Map | null>(null);
  const machineMarkersRef = useRef<Marker[]>([]);
  const machineMarkerRootsRef = useRef<Map<string, ReactDOMRoot>>(new Map());
  const userMarkerRef = useRef<Marker | null>(null);
  const userMarkerRootRef = useRef<ReactDOMRoot | null>(null);
  
  const [mapStatus, setMapStatus] = useState<"loading" | "loaded" | "error" | "no_token" | "no_webgl">("loading");
  const [mapErrorDetails, setMapErrorDetails] = useState<string | null>(null);

  useEffect(() => {
    if (!mapboxgl.supported()) {
      console.error("WebGL is not supported by this browser. Mapbox GL JS cannot run.");
      setMapStatus("no_webgl");
      setMapErrorDetails("Your browser does not support WebGL, which is required for the map.");
      return;
    }

    if (!MAPBOX_ACCESS_TOKEN || MAPBOX_ACCESS_TOKEN === PLACEHOLDER_TOKEN) {
      console.warn("Mapbox access token is not configured or is a placeholder. Map will not load. Please set NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN in your .env file.");
      setMapStatus("no_token");
      setMapErrorDetails("Map service is not configured correctly. A valid Mapbox token is required.");
      return;
    }
    
    mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;

    if (mapRef.current || !mapContainerRef.current) return; 

    setMapStatus("loading");
    mapRef.current = new mapboxgl.Map({
      container: mapContainerRef.current,
      style: 'mapbox://styles/mapbox/streets-v12',
      center: DEFAULT_CENTER,
      zoom: DEFAULT_ZOOM,
    });

    mapRef.current.on('load', () => {
      setMapStatus("loaded");
    });
    
    mapRef.current.on('error', (e) => {
      console.error('Mapbox GL error:', e.error?.message || e);
      setMapStatus("error");
      setMapErrorDetails(e.error?.message || "An error occurred while loading the map.");
       if (e.error && e.error.message.includes("Unauthorized")) {
         setMapErrorDetails("Invalid Mapbox Access Token. Please check your token configuration.");
       }
    });
    
    mapRef.current.addControl(new mapboxgl.NavigationControl(), 'top-right');

    return () => {
      // Deferred cleanup for React roots
      const rootsToUnmount: ReactDOMRoot[] = [];
      machineMarkerRootsRef.current.forEach(root => rootsToUnmount.push(root));
      if (userMarkerRootRef.current) {
        rootsToUnmount.push(userMarkerRootRef.current);
      }

      rootsToUnmount.forEach(root => {
        if (root) {
          setTimeout(() => {
            try {
              root.unmount();
            } catch (err) {
              console.warn("Error during deferred root unmount:", err);
            }
          }, 0);
        }
      });

      machineMarkerRootsRef.current.clear();
      userMarkerRootRef.current = null;

      // Synchronous cleanup for Mapbox markers and map instance
      machineMarkersRef.current.forEach(marker => marker.remove());
      machineMarkersRef.current = [];
      
      if (userMarkerRef.current) {
        userMarkerRef.current.remove();
        userMarkerRef.current = null;
      }
      
      if (mapRef.current) {
        mapRef.current.remove();
        mapRef.current = null;
      }
    };
  }, []); 

  useEffect(() => {
    if (!mapRef.current || mapStatus !== "loaded") return;

    // --- Cleanup of old markers ---
    const oldMachineRootsToUnmount: ReactDOMRoot[] = [];
    machineMarkerRootsRef.current.forEach(root => oldMachineRootsToUnmount.push(root));
    
    machineMarkersRef.current.forEach(marker => marker.remove());
    machineMarkersRef.current = [];
    machineMarkerRootsRef.current.clear();

    let oldUserRootToUnmount: ReactDOMRoot | null = null;
    if (userMarkerRootRef.current) {
      oldUserRootToUnmount = userMarkerRootRef.current;
    }
    if (userMarkerRef.current) {
      userMarkerRef.current.remove();
      userMarkerRef.current = null;
    }
    userMarkerRootRef.current = null;

    // Schedule unmounting of collected old React roots
    oldMachineRootsToUnmount.forEach(root => {
      if (root) {
        setTimeout(() => {
          try { root.unmount(); } catch (e) { console.warn("Error unmounting old machine root (on update):", e); }
        }, 0);
      }
    });
    if (oldUserRootToUnmount) {
      const finalOldUserRoot = oldUserRootToUnmount; 
      setTimeout(() => {
        try { finalOldUserRoot.unmount(); } catch (e) { console.warn("Error unmounting old user root (on update):", e); }
      }, 0);
    }
    // --- End Cleanup of old markers ---


    // Add/Update machine markers
    if (machines.length > 0) {
      machines.forEach(machine => {
        const el = document.createElement('div');
        const isSelected = machine.id === selectedMachineId;
        
        const root = createRoot(el);
        root.render(
          <MapPin
            className={cn(
              "h-8 w-8 drop-shadow-md cursor-pointer transition-all duration-150 ease-out",
              isSelected
                ? "text-accent fill-accent/40 scale-125"
                : "text-primary fill-primary/30 hover:text-primary/80 hover:scale-110"
            )}
            onClick={() => onMarkerClick?.(machine.id)}
          />
        );
        machineMarkerRootsRef.current.set(machine.id, root); 
        
        const marker = new mapboxgl.Marker(el)
          .setLngLat([machine.location.lng, machine.location.lat])
          .addTo(mapRef.current!);
        
        machineMarkersRef.current.push(marker);
      });
    }

    // Add/Update user location marker
    if (userLocation) {
      const el = document.createElement('div');
      const root = createRoot(el);
      root.render(
        <LocateFixed 
          className={cn(
            "h-7 w-7 drop-shadow-lg",
            "text-blue-600 fill-blue-500/30"
          )}
        />
      );
      userMarkerRootRef.current = root;
      userMarkerRef.current = new mapboxgl.Marker(el)
        .setLngLat([userLocation.lng, userLocation.lat])
        .addTo(mapRef.current!);
    }

    // Map Viewport Logic
    if (selectedMachineId) {
      const machine = machines.find(m => m.id === selectedMachineId);
      if (machine) {
        mapRef.current.flyTo({
          center: [machine.location.lng, machine.location.lat],
          zoom: 14, 
          essential: true,
          duration: 1000,
        });
      }
    } else if (userLocation) {
      mapRef.current.flyTo({
        center: [userLocation.lng, userLocation.lat],
        zoom: 14,
        essential: true,
        duration: 1000,
      });
    } else if (machines.length > 0) { 
      const bounds = new mapboxgl.LngLatBounds();
      machines.forEach(machine => {
        bounds.extend([machine.location.lng, machine.location.lat]);
      });
      if (!bounds.isEmpty()) {
         mapRef.current.fitBounds(bounds, {
            padding: { top: 60, bottom: 60, left: 60, right: 60 },
            maxZoom: 15,
            duration: 1000,
        });
      } else if (machines.length === 1) { 
        mapRef.current.flyTo({
            center: [machines[0].location.lng, machines[0].location.lat],
            zoom: 14,
            duration: 1000,
        });
      }
    } else { 
      mapRef.current.flyTo({
        center: DEFAULT_CENTER,
        zoom: DEFAULT_ZOOM,
        duration: 1000,
      });
    }
  }, [machines, selectedMachineId, userLocation, mapStatus, onMarkerClick]);


  if (mapStatus === "no_token" || mapStatus === "no_webgl" || mapStatus === "error") {
    const Icon = mapStatus === "no_token" || mapStatus === "error" ? AlertTriangle : WifiOff;
    const title = mapStatus === "no_token" ? "Map Service Unavailable" 
                : mapStatus === "no_webgl" ? "WebGL Not Supported" 
                : "Map Error";
    const message = mapErrorDetails || "An unexpected error occurred loading the map.";

    return (
      <div className={cn("relative w-full h-full bg-muted rounded-lg flex flex-col items-center justify-center p-4 text-center border border-destructive", className)}>
        <Icon className="h-16 w-16 text-destructive mb-4" />
        <h3 className="text-lg font-semibold text-destructive">{title}</h3>
        <p className="text-sm text-muted-foreground">{message}</p>
      </div>
    );
  }

  return (
    <div
      className={cn("relative w-full h-full bg-secondary/30 rounded-lg overflow-hidden border shadow-inner", className)}
      role="application"
      aria-label="Interactive map of vending machines"
    >
      <div ref={mapContainerRef} className="absolute inset-0 w-full h-full" />
      {mapStatus === "loading" && (
         <div className="absolute inset-0 w-full h-full bg-muted/70 flex flex-col items-center justify-center z-10 pointer-events-none">
            <LocateFixed className="h-12 w-12 text-primary animate-pulse mb-2" />
            <p className="text-muted-foreground">Initializing map...</p>
         </div>
      )}
    </div>
  );
}

